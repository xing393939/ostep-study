romimage: file=$BXSHARE/BIOS-bochs-latest
megs: 64
vgaromimage: file=$BXSHARE/VGABIOS-lgpl-latest

#=======================================================================
# FLOPPYA:
# Point this to pathname of floppy image file or device
# This should be of a bootable floppy(image/device) if you're
# booting from 'a'.
#
# You can set the initial status of the media to 'ejected' or 'inserted'.
#   floppya: 2_88=path, status=ejected             (2.88M 3.5" floppy)
#   floppya: 1_44=path, status=inserted            (1.44M 3.5" floppy)
#   floppya: 1_2=path, status=ejected              (1.2M  5.25" floppy)
#   floppya: 720k=path, status=inserted            (720K  3.5" floppy)
#
# The path should be the name of a disk image file.  On unix, you can use
# a raw device name such as /dev/fd0 on Linux.  On WinNT and Win2k, use
# drive letters such as a: or b: as the path.  Raw floppy access is not
# supported on Windows 95 and 98.
#=======================================================================
#floppya: 1_44=/dev/fd0, status=inserted
#floppya: file=../1.44, status=inserted
#floppya: 1_44=/dev/fd0H1440, status=inserted
#floppya: 1_2=../1_2, status=inserted
#floppya: 1_44=a:, status=inserted             # for win32
floppya: 1_44="bootimage-0.11-hd", status=inserted

#=======================================================================
# FLOPPYB:
# See FLOPPYA above for syntax
#=======================================================================
#floppyb: 1_44=b:, status=inserted
floppyb: 1_44=diskb.img, status=inserted

#=======================================================================
# DISKC: file=, cyl=, heads=, spt=
# Point this at a 10M, 20M, or 30M hard disk image file.  To create 
# a hard disk image, try running bximage.  It will help you choose the
# size and then suggest a diskc line that works with it.
#
# In UNIX it may be possible to use a raw device as a Bochs hard disk, 
# but WE DON'T RECOMMEND IT.  In Windows there is no easy way.
#
# Examples:
#   diskc: file=10M.sample, cyl=306, heads=4, spt=17
#   diskc: file=20M.sample, cyl=615, heads=4, spt=17
#   diskc: file=30M.sample, cyl=615, heads=6, spt=17
#   diskc: file=46M.sample, cyl=940, heads=6, spt=17
#   diskc: file=62M.sample, cyl=940, heads=8, spt=17
#   diskc: file=112M.sample, cyl=900, heads=15, spt=17
#   diskc: file=483M.sample, cyl=1024, heads=15, spt=63
#=======================================================================
#ata0-master: type=disk, path="hd.img", cylinders=227, heads=16, spt=63
ata0-master: type=disk, path="hdc-0.11.img", mode=flat, cylinders=121, heads=16, spt=63
#=======================================================================
# DISKD:
# See DISKC above for syntax
#
# NOTE: diskd and cdromd must not be used together!
#=======================================================================
#diskd: file="diskd.img", cyl=615, heads=6, spt=17

#=======================================================================
# CDROM
#
# cdromd: dev=/dev/cdrom, status=inserted
# cdromd: dev=/dev/cdrom, status=ejected
# cdromd: dev=e:, status=ejected
#
# In windows, the drive letter + colon notation should be used.  Depending
# on versions of windows and drivers, you may only be able to access the
# "first" cdrom in the system.
#
# NOTE: diskd and cdromd must not be used together!
#=======================================================================
#cdromd: dev=D:, status=inserted             # for win32
#cdromd: dev=/dev/cdrom, status=inserted

#=======================================================================
# NEWHARDDRIVESUPPORT: enabled=[0|1]
# As of cvs version on 5/17/2001, newharddrivesupport is on by default.
#=======================================================================
#newharddrivesupport: enabled=1

#=======================================================================
# BOOT:
# This defines your boot drive.  
# You can either boot from 'a', 'c' or 'cdrom'
# Examples:
#   boot: c
#   boot: a
#   boot: cdrom
#=======================================================================
boot: a
#boot: c

#=======================================================================
# LOG:
# Give the path of the log file you'd like Bochs debug and misc. verbage
# to be written to.  If you really don't want it, make it /dev/null. :^(
#
# Examples:
#   log: ./bochs.out
#   log: /dev/tty
#=======================================================================
#log: /dev/null
log: bochsout.txt

#=======================================================================
# LOG CONTROLS
#
# Bochs now has four severity levels for event logging.
#   panic: cannot proceed.  If you choose to continue after a panic, 
#          don't be surprised if you get strange behavior or crashes.
#   error: something went wrong, but it is probably safe to continue the
#          simulation.
#   info: interesting or useful messages.
#   debug: messages useful only when debugging the code.  This may
#          spit out thousands per second.
#
# For events of each level, you can choose to crash, report, or ignore.
# TODO: allow choice based on the facility: e.g. crash on panics from
#       everything except the cdrom, and only report those.
#
# If you are experiencing many panics, it can be helpful to change
# the panic action to report instead of fatal.  However, be aware
# that anything executed after a panic is uncharted territory and can 
# cause bochs to become unstable.  The panic is a "graceful exit," so
# if you disable it you may get a spectacular disaster instead.
#=======================================================================
#panic: action=ask
#error: action=report
#info: action=report
#debug: action=ignore

#=======================================================================
# com1:
# Specify the device to use as com1.  This can be a real serial line, or
# a pty.  To use a pty (under X/Unix), create two windows (xterms,
# usually).  One of them will run bochs, and the other will act as com1.
# Find out the tty the com1 window using the `tty' command, and use that
# as the `dev' parameter.  Then do `sleep 1000000' in the com1 window to
# keep the shell from messing with things, and run bochs in the other
# window.  Serial I/O to com1 (port 0x3f8) will all go to the other
# window.
#=======================================================================
#com1: dev=/dev/ttyp9


#=======================================================================
# PARPORT1:
# This defines a parallel (printer) port.  When turned on, the emulated
# printer port sends characters printed by the guest OS into an output file.
#
# Examples:
#   parport1: enable=1, file="parport.out"
#   parport1: enable=0
#=======================================================================


#=======================================================================
# SB16:
# This defines the SB16 sound emulation. It can have several of the
# following properties.
# All properties are in the format sb16: property=value
# midi: The filename is where the midi data is sent. This can be a
#       device or just a file if you want to record the midi data.
# midimode:
#      0=no data
#      1=output to device (system dependent. midi denotes the device driver)
#      2=SMF file output, including headers
#      3=output the midi data stream to the file (no midi headers and no
#        delta times, just command and data bytes)
# wave: This is the device/file where wave output is stored
# wavemode:
#      0=no data
#      1=output to device (system dependent. wave denotes the device driver)
#      2=VOC file output, incl. headers
#      3=output the raw wave stream to the file
# log:  The file to write the sb16 emulator messages to.
# loglevel:
#      0=no log
#      1=only midi program and bank changes
#      2=severe errors
#      3=all errors
#      4=all errors plus all port accesses
#      5=all errors and port accesses plus a lot of extra info
# dmatimer:
#      microseconds per second for a DMA cycle.  Make it smaller to fix
#      non-continous sound.  750000 is usually a good value.  This needs a
#      reasonably correct setting for IPS.
#
# For an example look at the next line:
#=======================================================================

#sb16: midimode=1, midi=/dev/midi00, wavemode=1, wave=/dev/dsp, loglevel=2, log=sb16.log, #dmatimer=600000

#=======================================================================
# VGA_UPDATE_INTERVAL:
# Video memory is scanned for updates and screen updated every so many
# virtual seconds.  The default is 300000, about 3Hz.  This is generally
# plenty.  Keep in mind that you must tweak the 'ips:' directive
# to be as close to the number of emulated instructions-per-second
# your workstation can do, for this to be accurate.
#
# Examples:
#   vga_update_interval: 250000
#=======================================================================



#=======================================================================
# mouse: Not used in any of the GUI specific modules, but the option
#        bx_options.mouse_enabled is set to this value.  The idea,
#        is that the GUI code should not generate mouse events when
#        not enabled.  The hardware emualation itself is not disabled
#        by this.  This is to facilitate deterministic runs of bochs.
#
# Examples:
#   mouse: enabled=1
#   mouse: enabled=0
#
# I wouldn't recommend enabling the mouse by default, unless you have a
# really good reason to do so.
#=======================================================================
mouse: enabled=0

#=======================================================================
# private_colormap: Request that the GUI create and use it's own
#                   non-shared colormap.  This colormap will be used
#                   when in the bochs window.  If not enabled, a
#                   shared colormap scheme may be used.  Not implemented
#                   on all GUI's.
#
# Examples:
#   private_colormap: enabled=1
#   private_colormap: enabled=0
#=======================================================================
private_colormap: enabled=0

#=======================================================================
# fullscreen: ONLY IMPLEMENTED ON AMIGA
#             Request that Bochs occupy the entire screen instead of a 
#             window.
#
# Examples:
#   fullscreen: enabled=0
#   fullscreen: enabled=1
#=======================================================================
fullscreen: enabled=0
screenmode: name="sample"



